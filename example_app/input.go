package main

const INPUT string = `
In previous blog articles we talked about the basic Redis features and learned how to persist, backup and restore your dataset in cause of a disaster scenario. Today we want to introduce you to a more complex setup. In fact, you can teach your Redis instances to be highly available for your clients. At this point the Sentinel jumps in. So what is this Sentinel stuff? The Sentinel process is a Redis Instance which was started with the â€“sentinel Option (or redis-sentinel binary). It needs a configuration file that tells the Sentinel which Redis master it should monitor. In short, these are the benefits of using Sentinel:
Monitoring: Sentinel constantly checks if the Redis master and its slave instances are working. Notifications: It can notify the system administrators or other tools via an API if something happens to your Redis instances. Automatic Failover: When Sentinel detects a failure of the master node it will start a failover where a slave is promoted to master. The additional slaves will be reconfigured automatically to use the new master. The application/clients that are using the Redis setup will be informed about the new address to use for the connection. Configuration provider: Sentinel can be used for service discovery. That means clients can connect to the Sentinel in order to ask for the current address of your Redis master. After a failover Sentinel will provide the new address. Configuration and example setup with three nodes The Sentinel processes are a part of a distributed system. That means your Sentinel processes are working together. For a high availability setup we suggest using more than one Sentinel, as Sentinel itself should not be a single point of failure. It also improves the proper failure detection via quorum.
Before you deploy Sentinel, consider the following facts. More in-depth information on the most important points can be found below: At least Three Sentinel instances are needed for a robust deployment. Separate your Sentinel instances with different VMs or servers. Due to the asynchronous replication of Redis the distributed setup does not guarantee that acknowledged writes are retained during failures.
Your client-library needs to support Sentinel.
Test your high availability setup from time to time in your test environment and even in production systems.
Sentinel, Docker or other NAT/Port Mapping technologies should only be mixed with care.
A three node setup is a good start, so run your Redis Master and two Slaves before setting up the Sentinel processes. On each of your Redis Hosts you create the same Sentinel config (/etc/redis-sentinel.conf, depending on your Linux distribution), like so:
`
